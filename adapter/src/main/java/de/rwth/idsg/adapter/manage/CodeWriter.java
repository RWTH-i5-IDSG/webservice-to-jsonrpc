package de.rwth.idsg.adapter.manage;

import java.io.BufferedWriter;
import java.io.FileWriter;

import javax.wsdl.Operation;

public class CodeWriter {
	String codeUsage, codeHead, codeImpl;

	CodeWriter(String wsdlUrl) {
		
		// Initialize the usage example code
		codeUsage = "/**\n" + 
				" * Code Generated By WebService to JSONRpc Adapter\n" + 
				" * Source WSDL: " + wsdlUrl + "\n" +
				" */ \n" + 
				"\n" + 
				"#import \"ViewController.h\"\n" + 
				"#import \"DSJSONRPC.h\"\n" + 
				"\n" + 
				"@interface ViewController ()\n" + 
				"\n" + 
				"@property (strong, nonatomic) DSJSONRPC *_jsonRPC;\n" + 
				"\n" + 
				"@end\n" + 
				"\n" + 
				"@implementation ViewController\n" + 
				"\n" + 
				"- (void)viewDidLoad\n" + 
				"{\n" + 
				"    [super viewDidLoad];\n" + 
				"	\n" + 
				"    self._jsonRPC = [[DSJSONRPC alloc] initWithServiceEndpoint:[NSURL URLWithString:@\"" + 
				
				"http://192.168.3.3:8080/adapter-test/request/" + 
				
				"\"]];\n" + 
				"" +
				"    // We're going to use a standard completion handler for our json-rpc calls - Please feel free to define your own\n" + 
				"    DSJSONRPCCompletionHandler completionHandler = ^(NSString *methodName, NSInteger callId, id methodResult, DSJSONRPCError *methodError, NSError *internalError) {		\n" + 
				"        if (methodError) {\n" + 
				"            NSLog(@\"\\nMethod %@(%i) returned an error: %@\\n\\n\", methodName, callId, methodError);\n" + 
				"        }	\n" + 
				"        else if (internalError) {\n" + 
				"            NSLog(@\"\\nMethod %@(%i) couldn't be sent with error: %@\\n\\n\", methodName, callId, internalError);\n" + 
				"        }\n" + 
				"        else {\n" + 
				"            NSLog(@\"\\nMethod %@(%i) completed with result: %@\\n\\n\", methodName, callId, methodResult);\n" + 
				"        }\n" + 
				"    };\n" +
				"\n" +
				"    // You can store the generated call id to match up responses\n" + 
				"    NSInteger callId;\n" +
				"\n";
		
		// Initialize the header file code
		codeHead = "/**\n" + 
				" * Code Generated By WebService to JSONRpc Adapter\n" + 
				" * Source WSDL: " + wsdlUrl + "\n" +
				" */ \n" + 
				"\n" + 
				"#import <Foundation/Foundation.h>\n" + 
				"\n" + 
				"@interface SoapAdapter : NSObject\n" +
				"\n";
		// Initialize the implementation file code
		codeImpl = "/**\n" + 
				" * Code Generated By WebService to JSONRpc Adapter\n" + 
				" * Source WSDL: " + wsdlUrl + "\n" +
				" */ \n" + 
				"\n" + 
				"#import \"SoapAdapter.h\"\r\n" + 
				"\r\n" + 
				"@implementation SoapAdapter\n" +
				"\n";
	}
	
	void addOperation(Operation operation, String params, String output) {
		codeUsage += 	"/**\n * Stub call for method \"" + operation.getName() + "\"\n" +
				" * Description: " + 
				((operation.getDocumentationElement()== null 
					|| operation.getDocumentationElement().getNodeValue()==null) 
						? "No Documentation or Parsing Failed" 
						: operation.getDocumentationElement().getNodeValue()) + "\n" +
				" * Returns:\n" + 
					output +
				" */\n";

		if (!params.equals(""))  {
			codeUsage += "NSMutableDictionary *" + operation.getName()+"Params = " +
								"[@{ \n" + params + "} mutableCopy];\n" +
								"" +
						 "callId = [self._jsonRPC " + 
								"callMethod:@\"" + operation.getName() + 
								"\" withParameters:" + operation.getName()+"Params " + 
								"onCompletion:completionHandler];\n\n";
		} else {
			codeUsage += "callId = [self._jsonRPC " + 
								"callMethod:@\"" +	operation.getName() + 
								"\" onCompletion:completionHandler];\n\n";
		}
	}
	
	void write() {
		codeUsage += "}\n\n" +
				"- (void)viewDidUnload\n" + 
				"{\n" + 
				"    [super viewDidUnload];\n" + 
				"    // Release any retained subviews of the main view.\n" + 
				"}\n" + 
				"\n" + 
				"- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation\n" + 
				"{\n" + 
				"    return (interfaceOrientation != UIInterfaceOrientationPortraitUpsideDown);\n" + 
				"}\n" + 
				"\n" + 
				"@end\n";
		codeHead += "@end\n";
		codeImpl += "@end\n";
		write2File();
	}

	private void write2File(){
		try{
			// Create file 
			FileWriter fstream = new FileWriter("C:\\Users\\New\\Desktop\\out.m");
			BufferedWriter out = new BufferedWriter(fstream);
			out.write(codeUsage);
			//Close the output stream
			out.close();
		}catch (Exception e){ //Catch exception if any
			System.err.println("Error: " + e.getMessage());
		}
	}
	
	private void function() {
		
	}

	
}